<?xml version="1.0" encoding="UTF-8" standalone="no"?><featureModel><properties/><struct><and abstract="true" mandatory="true" name="uvr2web"><description> uvr2web's goal is to retrieve sensor data and visualize it. </description><and abstract="true" mandatory="true" name="data capture"><description> The first step is capturing some data from a supported device. </description><alt abstract="true" mandatory="true" name="devices"><description> All supported devices for data capture. </description><alt name="TA"><description> „Technische Alternative“ is a company selling heating controls. Their devices export sensor data which can be easily captured with an Arduino board. One existing variant of this project supports the UVR1611 control. </description><feature name="UVR31"/><feature name="UVR42"/><feature name="UVR64"/><feature name="HZR65"/><feature name="EEG30"/><feature name="TFM66"/><feature name="UVR1611"><description> This is the only control currently implemented. </description></feature><feature name="UVR61-3"/><feature name="ESR21"/></alt><feature abstract="true" name="HCP module"><description> HCP-Technology is a company selling coolers, incubators and other temperature-related hardware. An existing variant of this project is used with a Bluetooth module to capture temperature data inside a cooler. </description></feature></alt><alt abstract="true" mandatory="true" name="data type"><description> There are different types of data captured. Some features are only supported for specific data types. </description><feature abstract="true" name="compound"><description> The data contains more than one value, e.g. multiple sensor values. </description></feature><feature abstract="true" name="single sensor"><description> The data contains only one scalar value. </description></feature></alt></and><alt abstract="true" mandatory="true" name="data transfer"><description> The second step is transferring the data to an application. </description><feature abstract="true" name="Bluetooth"><description> The HCP module is only capable of Bluetooth data transfer. </description></feature><feature abstract="true" name="Internet"><description> The TA devices are connected to the Internet via an Arduino. </description></feature></alt><and abstract="true" mandatory="true" name="data visualization"><description> The third step is receiving, storing and visualizing the captured data. </description><and abstract="true" mandatory="true" name="application"><description> Some application is needed to show the captured data to the user. </description><and abstract="true" name="local"><description> A way to visualize data not involving the Internet. </description><feature name="Windows"><description> There is already a Windows (e.g. C#) client to receive Bluetooth data. </description></feature><feature name="Android"><description> There is already an Android (e.g. Java) client to receive Bluetooth data. </description></feature></and><and abstract="true" name="server"><description> Part of the application that lives on a PHP server. </description><feature name="customer management"><description> A frontend to create, edit and remove customers for commercial use. </description></feature><alt mandatory="true" name="server application"><description> An Internet application that retrieves data and stores it inside a database. </description><and name="database"><description> The actual database application. </description><and mandatory="true" name="device renderers"><description> Every type of measuring device has its own rendering mechanism. Every supported device has sensor data, but only some provide e.g. heat meter data. </description><feature mandatory="true" name="sensor"/><feature name="output"/><feature name="heat meter"/><feature name="speed step"/></and><feature name="API"><description> There’s an API for fetching raw data, but it’s optional. </description></feature><and mandatory="true" name="admin"><description> The administration section of the database. </description><or mandatory="true" name="language"><description> The user may choose a language. </description><feature name="German"/><feature name="English"/><feature name="French"/></or><feature name="backup"><description> The user may back up all data. </description></feature><feature name="uninstall"><description> The user may uninstall the database application from the server. </description></feature><or name="notifications"><description> The user may enable email notifications for specific events. </description><feature name="backup notification"/><feature name="no upload notification"/><feature name="trigger notification"/></or><feature name="user management"><description> The user may edit, create and remove other users. </description></feature></and></and><feature name="Emoncms"><description> Emoncms is a new platform for visualizing captured data. I’d like to integrate it with this software (in the long run). </description></feature></alt></and></and><alt abstract="true" mandatory="true" name="branding"><description> There are three variants of this software in use, each with its own branding (name, logo etc.). </description><alt abstract="true" name="commercial"><description> Branding for commercial purposes. </description><feature name="HCP"><description> Logos etc. for HCP-Technology GmbH. </description></feature><feature name="Dometic"><description> Logos etc. for Dometic WAECO International GmbH. </description></feature></alt><feature name="personal"><description> Branding for personal use. </description></feature></alt></and></and></struct><constraints><rule><imp><var>HCP module</var><var>Bluetooth</var></imp></rule><rule><imp><var>Bluetooth</var><var>local</var></imp></rule><rule><imp><var>local</var><var>single sensor</var></imp></rule><rule><imp><var>HCP module</var><var>single sensor</var></imp></rule><rule><imp><var>TA</var><var>compound</var></imp></rule><rule><imp><var>TA</var><var>Internet</var></imp></rule><rule><imp><conj><var>single sensor</var><var>database</var></conj><conj><var>sensor</var><conj><not><var>output</var></not><conj><not><var>heat meter</var></not><not><var>speed step</var></not></conj></conj></conj></imp></rule><rule><imp><var>customer management</var><conj><not><var>backup</var></not><not><var>uninstall</var></not></conj></imp></rule><rule><imp><conj><disj><var>UVR31</var><disj><var>UVR42</var><disj><var>UVR64</var><disj><var>HZR65</var><var>TFM66</var></disj></disj></disj></disj><var>database</var></conj><conj><var>sensor</var><var>output</var></conj></imp></rule><rule><imp><conj><var>EEG30</var><var>database</var></conj><var>sensor</var></imp></rule><rule><imp><conj><disj><var>UVR1611</var><disj><var>UVR61-3</var><var>ESR21</var></disj></disj><var>database</var></conj><conj><var>sensor</var><conj><var>output</var><conj><var>heat meter</var><var>speed step</var></conj></conj></conj></imp></rule><rule><imp><var>Internet</var><var>server</var></imp></rule><rule><imp><var>commercial</var><var>customer management</var></imp></rule><rule><imp><var>customer management</var><not><var>Emoncms</var></not></imp></rule></constraints><calculations Auto="true" Constraints="true" Features="true" Redundant="true" Tautology="true"/><comments/><featureOrder userDefined="false"/></featureModel>